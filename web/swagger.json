{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Entry point for the application.",
    "title": "DeckBuilder",
    "version": "1.0.0"
  },
  "host": "localhost:5000",
  "basePath": "/",
  "paths": {
    "/api/games": {
      "get": {
        "description": "Get a list of existing games\nSort values: name, name_desc, created, created_desc",
        "tags": [
          "Games"
        ],
        "summary": "# Get games list",
        "operationId": "RequestListOfGames",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Sort",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Search",
            "name": "search",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseListOfGames"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      },
      "post": {
        "description": "Allows you to create a new game",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Games"
        ],
        "summary": "# Create game",
        "operationId": "RequestCreateGame",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Description",
            "name": "description",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Image",
            "name": "image",
            "in": "formData"
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "ImageFile",
            "name": "imageFile",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseCreateGame"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/games/import": {
      "post": {
        "description": "Creat game from archive",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Games"
        ],
        "summary": "# Import game from archive",
        "operationId": "RequestImportGame",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Specify a name for the imported game",
            "name": "name",
            "in": "formData"
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "File",
            "description": "Binary data of the imported file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseGameImport"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/games/{game}": {
      "get": {
        "description": "Get an existing game",
        "tags": [
          "Games"
        ],
        "summary": "# Get game",
        "operationId": "RequestGame",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseGame"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      },
      "delete": {
        "description": "Allows you to delete an existing game",
        "tags": [
          "Games"
        ],
        "summary": "# Delete game",
        "operationId": "RequestDeleteGame",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseDeleteGame"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      },
      "patch": {
        "description": "Allows you to update an existing game",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Games"
        ],
        "summary": "# Update game",
        "operationId": "RequestUpdateGame",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Description",
            "name": "description",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Image",
            "name": "image",
            "in": "formData"
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "ImageFile",
            "name": "imageFile",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseUpdateGame"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/games/{game}/collections": {
      "get": {
        "description": "Get a list of existing collections\nSort values: name, name_desc, created, created_desc",
        "tags": [
          "Collections"
        ],
        "summary": "# Get collections list",
        "operationId": "RequestListOfCollections",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Sort",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Search",
            "name": "search",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseListOfCollections"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      },
      "post": {
        "description": "Allows you to create a new collection",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Collections"
        ],
        "summary": "# Create collection",
        "operationId": "RequestCreateCollection",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Description",
            "name": "description",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Image",
            "name": "image",
            "in": "formData"
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "ImageFile",
            "name": "imageFile",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseCreateCollection"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/games/{game}/collections/{collection}": {
      "get": {
        "description": "Get an existing collection",
        "tags": [
          "Collections"
        ],
        "summary": "# Get collection",
        "operationId": "RequestCollection",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Collection",
            "name": "collection",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseCollection"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      },
      "delete": {
        "description": "Allows you to delete an existing collection",
        "tags": [
          "Collections"
        ],
        "summary": "# Delete collection",
        "operationId": "RequestDeleteCollection",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Collection",
            "name": "collection",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseDeleteCollection"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      },
      "patch": {
        "description": "Allows you to update an existing collection",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Collections"
        ],
        "summary": "# Update collection",
        "operationId": "RequestUpdateCollection",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Collection",
            "name": "collection",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Description",
            "name": "description",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Image",
            "name": "image",
            "in": "formData"
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "ImageFile",
            "name": "imageFile",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseUpdateCollection"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/games/{game}/collections/{collection}/decks": {
      "get": {
        "description": "Get a list of existing decks\nSort values: name, name_desc, created, created_desc",
        "tags": [
          "Decks"
        ],
        "summary": "# Get decks list",
        "operationId": "RequestListOfDecks",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Collection",
            "name": "collection",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Sort",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Search",
            "name": "search",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseListOfDecks"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      },
      "post": {
        "description": "Allows you to create a new deck",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Decks"
        ],
        "summary": "# Create deck",
        "operationId": "RequestCreateDeck",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Collection",
            "name": "collection",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Description",
            "name": "description",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Image",
            "name": "image",
            "in": "formData"
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "ImageFile",
            "name": "imageFile",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseCreateDeck"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/games/{game}/collections/{collection}/decks/{deck}": {
      "get": {
        "description": "Get an existing deck",
        "tags": [
          "Decks"
        ],
        "summary": "# Get deck",
        "operationId": "RequestDeck",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Collection",
            "name": "collection",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Deck",
            "name": "deck",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseDeck"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      },
      "delete": {
        "description": "Allows you to delete an existing deck",
        "tags": [
          "Decks"
        ],
        "summary": "# Delete deck",
        "operationId": "RequestDeleteDeck",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Collection",
            "name": "collection",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Deck",
            "name": "deck",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseDeleteDeck"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      },
      "patch": {
        "description": "Allows you to update an existing deck",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Decks"
        ],
        "summary": "# Update deck",
        "operationId": "RequestUpdateDeck",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Collection",
            "name": "collection",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Deck",
            "name": "deck",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Description",
            "name": "description",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Image",
            "name": "image",
            "in": "formData"
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "ImageFile",
            "name": "imageFile",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseUpdateDeck"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/games/{game}/collections/{collection}/decks/{deck}/cards": {
      "get": {
        "description": "Get a list of existing cards\nSort values: name, name_desc, created, created_desc",
        "tags": [
          "Cards"
        ],
        "summary": "# Get cards list",
        "operationId": "RequestListOfCard",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Collection",
            "name": "collection",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Deck",
            "name": "deck",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Sort",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Search",
            "name": "search",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseListOfCard"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      },
      "post": {
        "description": "Allows you to create a new card",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Cards"
        ],
        "summary": "# Create card",
        "operationId": "RequestCreateCard",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Collection",
            "name": "collection",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Deck",
            "name": "deck",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Description",
            "name": "description",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Image",
            "name": "image",
            "in": "formData"
          },
          {
            "type": "string",
            "x-go-name": "Variables",
            "name": "variables",
            "in": "formData"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Count",
            "name": "count",
            "in": "formData",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "ImageFile",
            "name": "imageFile",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseCreateCard"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/games/{game}/collections/{collection}/decks/{deck}/cards/{card}": {
      "get": {
        "description": "Get an existing card",
        "tags": [
          "Cards"
        ],
        "summary": "# Get card",
        "operationId": "RequestCard",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Collection",
            "name": "collection",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Deck",
            "name": "deck",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Card",
            "name": "card",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseCard"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      },
      "delete": {
        "description": "Allows you to delete an existing card",
        "tags": [
          "Cards"
        ],
        "summary": "# Delete card",
        "operationId": "RequestDeleteCard",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Collection",
            "name": "collection",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Deck",
            "name": "deck",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Card",
            "name": "card",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseDeleteCard"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      },
      "patch": {
        "description": "Allows you to update an existing card",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Cards"
        ],
        "summary": "# Update card",
        "operationId": "RequestUpdateCard",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Collection",
            "name": "collection",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Deck",
            "name": "deck",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Card",
            "name": "card",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "name": "name",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Description",
            "name": "description",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Image",
            "name": "image",
            "in": "formData"
          },
          {
            "type": "string",
            "x-go-name": "Variables",
            "name": "variables",
            "in": "formData"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Count",
            "name": "count",
            "in": "formData",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "ImageFile",
            "name": "imageFile",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseUpdateCard"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/games/{game}/collections/{collection}/decks/{deck}/cards/{card}/image": {
      "get": {
        "description": "Get an image of existing card",
        "produces": [
          "application/json",
          "image/png",
          "image/jpeg",
          "image/gif"
        ],
        "tags": [
          "Images"
        ],
        "summary": "# Get card image",
        "operationId": "RequestCardImage",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Collection",
            "name": "collection",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Deck",
            "name": "deck",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Card",
            "name": "card",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseCardImage"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/games/{game}/collections/{collection}/decks/{deck}/image": {
      "get": {
        "description": "Get an image of existing deck",
        "produces": [
          "application/json",
          "image/png",
          "image/jpeg",
          "image/gif"
        ],
        "tags": [
          "Images"
        ],
        "summary": "# Get deck image",
        "operationId": "RequestDeckImage",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Collection",
            "name": "collection",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Deck",
            "name": "deck",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseDeckImage"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/games/{game}/collections/{collection}/image": {
      "get": {
        "description": "Get an image of existing collection",
        "produces": [
          "application/json",
          "image/png",
          "image/jpeg",
          "image/gif"
        ],
        "tags": [
          "Images"
        ],
        "summary": "# Get collection image",
        "operationId": "RequestCollectionImage",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Collection",
            "name": "collection",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseCollectionImage"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/games/{game}/decks": {
      "get": {
        "description": "Get a list of all existing decks in game",
        "tags": [
          "Decks"
        ],
        "summary": "# Get list of all decks in game",
        "operationId": "RequestListOfAllDecks",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseListOfAllDecks"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/games/{game}/duplicate": {
      "post": {
        "description": "Allows you to create a copy of an existing game",
        "tags": [
          "Games"
        ],
        "summary": "# Duplicate game",
        "operationId": "RequestDuplicateGame",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "x-go-name": "Name"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseDuplicateGame"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/games/{game}/export": {
      "get": {
        "description": "Get an existing game archive",
        "produces": [
          "application/json",
          "application/zip"
        ],
        "tags": [
          "Games"
        ],
        "summary": "# Export game to archive",
        "operationId": "RequestArchiveGame",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseGameArchive"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/games/{game}/generate": {
      "post": {
        "description": "Allow to run the background process of generating images and json item for the game",
        "tags": [
          "Generator"
        ],
        "summary": "# Start generating items for TTS",
        "operationId": "RequestGameGenerate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "scale": {
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "Scale"
                },
                "sortOrder": {
                  "type": "string",
                  "x-go-name": "SortOrder"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseGameGenerate"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/games/{game}/image": {
      "get": {
        "description": "Get an image of existing game",
        "produces": [
          "application/json",
          "image/png",
          "image/jpeg",
          "image/gif"
        ],
        "tags": [
          "Images"
        ],
        "summary": "# Get game image",
        "operationId": "RequestGameImage",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseGameImage"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/replace": {
      "post": {
        "description": "Accepts as input the generated resulting json file for the saved TTS object and the mapped URL files.\nThis returns a saved TTS object json file with local file paths replaced by URLs.\nAnd with these cards you can already save your table and share it with other users.",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Replace"
        ],
        "summary": "# Replace all image paths with a mapping file",
        "operationId": "RequestReplaceReplace",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "File",
            "description": "Json file",
            "name": "file",
            "in": "formData",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "Mapping",
            "description": "Json file",
            "name": "mapping",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseReplaceReplace"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/replace/prepare": {
      "post": {
        "description": "Takes as input the generated resulting json file for a saved TTS object.\nAs a result, it returns a map of the files that should be uploaded to the web repository\nand allows you to manually map those files to valid URLs.",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Replace"
        ],
        "summary": "# Map with key image and empty value for URLs",
        "operationId": "RequestPrepareReplace",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "File",
            "description": "Json file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponsePrepareReplace"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/search": {
      "get": {
        "description": "Get a list of all objects that matched the search mask\nSort values: name, name_desc, created, created_desc",
        "tags": [
          "Search"
        ],
        "summary": "# Recursive search for all games",
        "operationId": "RequestRootSearch",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Sort",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Search",
            "name": "search",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseRootSearch"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/search/games/{game}": {
      "get": {
        "description": "Get a list of all objects that match the search mask and are in a particular game\nSort values: name, name_desc, created, created_desc",
        "tags": [
          "Search"
        ],
        "summary": "# Recursive search in a particular game",
        "operationId": "RequestGameSearch",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Sort",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Search",
            "name": "search",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseGameSearch"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/search/games/{game}/collections/{collection}": {
      "get": {
        "description": "Get a list of all objects that match the search mask and are in a particular game and collection\nSort values: name, name_desc, created, created_desc",
        "tags": [
          "Search"
        ],
        "summary": "# Recursive search in a particular game and collection",
        "operationId": "RequestCollectionSearch",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Game",
            "name": "game",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Collection",
            "name": "collection",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Sort",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Search",
            "name": "search",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseCollectionSearch"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/system/quit": {
      "delete": {
        "description": "Close app on back side",
        "tags": [
          "System"
        ],
        "summary": "# Close application",
        "operationId": "RequestQuit",
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseQuit"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/system/settings": {
      "get": {
        "description": "Get default or changed settings",
        "tags": [
          "System"
        ],
        "summary": "# Get settings",
        "operationId": "RequestSettings",
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseSettings"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      },
      "patch": {
        "description": "API to update settings",
        "tags": [
          "System"
        ],
        "summary": "# Update settings",
        "operationId": "RequestUpdateSettings",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "lang": {
                  "type": "string",
                  "x-go-name": "Lang"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseUpdateSettings"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/system/status": {
      "get": {
        "description": "API to get status of process",
        "tags": [
          "System"
        ],
        "summary": "# Get progress status",
        "operationId": "RequestStatus",
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseStatus"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/system/version": {
      "get": {
        "description": "API to get version of application",
        "tags": [
          "System"
        ],
        "summary": "# Get app version",
        "operationId": "RequestVersion",
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseVersion"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    },
    "/api/tts/data": {
      "get": {
        "description": "API for TTS for downloading JSON file inside game",
        "tags": [
          "TTS"
        ],
        "summary": "# Get json file from last generator",
        "operationId": "RequestDataTTS",
        "responses": {
          "200": {
            "$ref": "#/responses/ResponseDataTTS"
          },
          "default": {
            "$ref": "#/responses/ResponseError"
          }
        }
      }
    }
  },
  "definitions": {
    "CardInfo": {
      "type": "object",
      "properties": {
        "cachedImage": {
          "type": "string",
          "x-go-name": "CachedImage"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "image": {
          "type": "string",
          "x-go-name": "Image"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Variables"
        }
      },
      "x-go-package": "github.com/HardDie/DeckBuilder/internal/entity"
    },
    "CardSize": {
      "type": "object",
      "properties": {
        "scaleX": {
          "type": "number",
          "format": "double",
          "x-go-name": "ScaleX"
        },
        "scaleY": {
          "type": "number",
          "format": "double",
          "x-go-name": "ScaleY"
        },
        "scaleZ": {
          "type": "number",
          "format": "double",
          "x-go-name": "ScaleZ"
        }
      },
      "x-go-package": "github.com/HardDie/DeckBuilder/internal/entity"
    },
    "CollectionInfo": {
      "type": "object",
      "properties": {
        "cachedImage": {
          "type": "string",
          "x-go-name": "CachedImage"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "image": {
          "type": "string",
          "x-go-name": "Image"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/HardDie/DeckBuilder/internal/entity"
    },
    "DeckInfo": {
      "type": "object",
      "properties": {
        "cachedImage": {
          "type": "string",
          "x-go-name": "CachedImage"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "image": {
          "type": "string",
          "x-go-name": "Image"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/HardDie/DeckBuilder/internal/entity"
    },
    "Err": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "err": {
          "type": "string",
          "x-go-name": "Err"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "github.com/HardDie/DeckBuilder/internal/errors"
    },
    "GameInfo": {
      "type": "object",
      "properties": {
        "cachedImage": {
          "type": "string",
          "x-go-name": "CachedImage"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "image": {
          "type": "string",
          "x-go-name": "Image"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/HardDie/DeckBuilder/internal/entity"
    },
    "Meta": {
      "type": "object",
      "properties": {
        "cardsTotal": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CardsTotal"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/HardDie/DeckBuilder/internal/network"
    },
    "SettingInfo": {
      "type": "object",
      "properties": {
        "card_size": {
          "$ref": "#/definitions/CardSize"
        },
        "enable_back_shadow": {
          "type": "boolean",
          "x-go-name": "EnableBackShadow"
        },
        "lang": {
          "type": "string",
          "x-go-name": "Lang"
        }
      },
      "x-go-package": "github.com/HardDie/DeckBuilder/internal/entity"
    },
    "Status": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "progress": {
          "type": "number",
          "format": "float",
          "x-go-name": "Progress"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/HardDie/DeckBuilder/internal/entity"
    }
  },
  "responses": {
    "ResponseCard": {
      "description": "Card",
      "schema": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/CardInfo"
          }
        }
      }
    },
    "ResponseCardImage": {
      "description": "Card image",
      "schema": {
        "type": "array",
        "items": {
          "type": "integer",
          "format": "uint8"
        }
      }
    },
    "ResponseCollection": {
      "description": "Collection",
      "schema": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/CollectionInfo"
          }
        }
      }
    },
    "ResponseCollectionImage": {
      "description": "Collection image",
      "schema": {
        "type": "array",
        "items": {
          "type": "integer",
          "format": "uint8"
        }
      }
    },
    "ResponseCollectionSearch": {
      "description": "List of found objects",
      "schema": {
        "type": "object",
        "required": [
          "data",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "Data"
          },
          "meta": {
            "$ref": "#/definitions/Meta"
          }
        }
      }
    },
    "ResponseCreateCard": {
      "description": "Status of card creation",
      "schema": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/CardInfo"
          }
        }
      }
    },
    "ResponseCreateCollection": {
      "description": "Status of collection creation",
      "schema": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/CollectionInfo"
          }
        }
      }
    },
    "ResponseCreateDeck": {
      "description": "Status of deck creation",
      "schema": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/DeckInfo"
          }
        }
      }
    },
    "ResponseCreateGame": {
      "description": "Status of game creation",
      "schema": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/GameInfo"
          }
        }
      }
    },
    "ResponseDataTTS": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "type": "integer",
          "format": "uint8"
        }
      }
    },
    "ResponseDeck": {
      "description": "Deck",
      "schema": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/DeckInfo"
          }
        }
      }
    },
    "ResponseDeckImage": {
      "description": "Deck image",
      "schema": {
        "type": "array",
        "items": {
          "type": "integer",
          "format": "uint8"
        }
      }
    },
    "ResponseDeleteCard": {
      "description": "Card deletion status"
    },
    "ResponseDeleteCollection": {
      "description": "Collection deletion status"
    },
    "ResponseDeleteDeck": {
      "description": "Deck deletion status"
    },
    "ResponseDeleteGame": {
      "description": "Game deletion status"
    },
    "ResponseDuplicateGame": {
      "description": "Status of game duplicate",
      "schema": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/GameInfo"
          }
        }
      }
    },
    "ResponseError": {
      "description": "Default error response",
      "schema": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "$ref": "#/definitions/Err"
          }
        }
      }
    },
    "ResponseGame": {
      "description": "Game",
      "schema": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/GameInfo"
          }
        }
      }
    },
    "ResponseGameArchive": {
      "description": "Game archive",
      "schema": {
        "type": "array",
        "items": {
          "type": "integer",
          "format": "uint8"
        }
      }
    },
    "ResponseGameGenerate": {
      "description": "Generating game objects"
    },
    "ResponseGameImage": {
      "description": "Game image",
      "schema": {
        "type": "array",
        "items": {
          "type": "integer",
          "format": "uint8"
        }
      }
    },
    "ResponseGameImport": {
      "description": "Import game",
      "schema": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/GameInfo"
          }
        }
      }
    },
    "ResponseGameSearch": {
      "description": "List of found objects",
      "schema": {
        "type": "object",
        "required": [
          "data",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "Data"
          },
          "meta": {
            "$ref": "#/definitions/Meta"
          }
        }
      }
    },
    "ResponseListOfAllDecks": {
      "description": "List of decks",
      "schema": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DeckInfo"
            },
            "x-go-name": "Data"
          }
        }
      }
    },
    "ResponseListOfCard": {
      "description": "List of cards",
      "schema": {
        "type": "object",
        "required": [
          "data",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CardInfo"
            },
            "x-go-name": "Data"
          },
          "meta": {
            "$ref": "#/definitions/Meta"
          }
        }
      }
    },
    "ResponseListOfCollections": {
      "description": "List of collections",
      "schema": {
        "type": "object",
        "required": [
          "data",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CollectionInfo"
            },
            "x-go-name": "Data"
          },
          "meta": {
            "$ref": "#/definitions/Meta"
          }
        }
      }
    },
    "ResponseListOfDecks": {
      "description": "List of decks",
      "schema": {
        "type": "object",
        "required": [
          "data",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DeckInfo"
            },
            "x-go-name": "Data"
          },
          "meta": {
            "$ref": "#/definitions/Meta"
          }
        }
      }
    },
    "ResponseListOfGames": {
      "description": "List of games",
      "schema": {
        "type": "object",
        "required": [
          "data",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/GameInfo"
            },
            "x-go-name": "Data"
          },
          "meta": {
            "$ref": "#/definitions/Meta"
          }
        }
      }
    },
    "ResponsePrepareReplace": {
      "description": "",
      "schema": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "Data"
          }
        }
      }
    },
    "ResponseQuit": {
      "description": "Quit"
    },
    "ResponseReplaceReplace": {
      "description": "",
      "schema": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "Data"
          }
        }
      }
    },
    "ResponseRootSearch": {
      "description": "List of found objects",
      "schema": {
        "type": "object",
        "required": [
          "data",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "Data"
          },
          "meta": {
            "$ref": "#/definitions/Meta"
          }
        }
      }
    },
    "ResponseSettings": {
      "description": "Settings",
      "schema": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/SettingInfo"
          }
        }
      }
    },
    "ResponseStatus": {
      "description": "Status",
      "schema": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/Status"
          }
        }
      }
    },
    "ResponseUpdateCard": {
      "description": "Status of card update",
      "schema": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/CardInfo"
          }
        }
      }
    },
    "ResponseUpdateCollection": {
      "description": "Status of collection update",
      "schema": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/CollectionInfo"
          }
        }
      }
    },
    "ResponseUpdateDeck": {
      "description": "Status of deck update",
      "schema": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/DeckInfo"
          }
        }
      }
    },
    "ResponseUpdateGame": {
      "description": "Status of game update",
      "schema": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/GameInfo"
          }
        }
      }
    },
    "ResponseUpdateSettings": {
      "description": "Settings",
      "schema": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/SettingInfo"
          }
        }
      }
    },
    "ResponseVersion": {
      "description": "Version",
      "schema": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "string",
            "x-go-name": "Data"
          }
        }
      }
    }
  }
}